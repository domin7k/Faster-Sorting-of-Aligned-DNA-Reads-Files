
@article{hach_deez_2014,
	title = {{DeeZ}: reference-based compression by local assembly},
	volume = {11},
	copyright = {2014 Springer Nature America, Inc.},
	issn = {1548-7105},
	shorttitle = {{DeeZ}},
	url = {https://www.nature.com/articles/nmeth.3133},
	doi = {10.1038/nmeth.3133},
	language = {en},
	number = {11},
	urldate = {2024-05-19},
	journal = {Nature Methods},
	author = {Hach, Faraz and Numanagic, Ibrahim and Sahinalp, S. Cenk},
	month = nov,
	year = {2014},
	note = {Publisher: Nature Publishing Group},
	keywords = {Data publication and archiving},
	pages = {1082--1084},
}

@article{fritz_efficient_2011,
	title = {Efficient storage of high throughput {DNA} sequencing data using reference-based compression},
	volume = {21},
	issn = {1088-9051, 1549-5469},
	url = {https://genome.cshlp.org/content/21/5/734},
	doi = {10.1101/gr.114819.110},
	abstract = {Data storage costs have become an appreciable proportion of total cost in the creation and analysis of DNA sequence data. Of particular concern is that the rate of increase in DNA sequencing is significantly outstripping the rate of increase in disk storage capacity. In this paper we present a new reference-based compression method that efficiently compresses DNA sequences for storage. Our approach works for resequencing experiments that target well-studied genomes. We align new sequences to a reference genome and then encode the differences between the new sequence and the reference genome for storage. Our compression method is most efficient when we allow controlled loss of data in the saving of quality information and unaligned sequences. With this new compression method we observe exponential efficiency gains as read lengths increase, and the magnitude of this efficiency gain can be controlled by changing the amount of quality information stored. Our compression method is tunable: The storage of quality scores and unaligned sequences may be adjusted for different experiments to conserve information or to minimize storage costs, and provides one opportunity to address the threat that increasing DNA sequence volumes will overcome our ability to store the sequences.},
	language = {en},
	number = {5},
	urldate = {2024-05-19},
	journal = {Genome Research},
	author = {Fritz, Markus Hsi-Yang and Leinonen, Rasko and Cochrane, Guy and Birney, Ewan},
	month = may,
	year = {2011},
	pmid = {21245279},
	note = {Company: Cold Spring Harbor Laboratory Press
Distributor: Cold Spring Harbor Laboratory Press
Institution: Cold Spring Harbor Laboratory Press
Label: Cold Spring Harbor Laboratory Press
Publisher: Cold Spring Harbor Lab},
	pages = {734--740},
}

@article{popitsch_ngc_2013,
	title = {{NGC}: lossless and lossy compression of aligned high-throughput sequencing data},
	volume = {41},
	issn = {0305-1048},
	shorttitle = {{NGC}},
	url = {https://doi.org/10.1093/nar/gks939},
	doi = {10.1093/nar/gks939},
	abstract = {A major challenge of current high-throughput sequencing experiments is not only the generation of the sequencing data itself but also their processing, storage and transmission. The enormous size of these data motivates the development of data compression algorithms usable for the implementation of the various storage policies that are applied to the produced intermediate and final result files. In this article, we present NGC, a tool for the compression of mapped short read data stored in the wide-spread SAM format. NGC enables lossless and lossy compression and introduces the following two novel ideas: first, we present a way to reduce the number of required code words by exploiting common features of reads mapped to the same genomic positions; second, we present a highly configurable way for the quantization of per-base quality values, which takes their influence on downstream analyses into account. NGC, evaluated with several real-world data sets, saves 33–66\% of disc space using lossless and up to 98\% disc space using lossy compression. By applying two popular variant and genotype prediction tools to the decompressed data, we could show that the lossy compression modes preserve \&gt;99\% of all called variants while outperforming comparable methods in some configurations.},
	number = {1},
	urldate = {2024-05-19},
	journal = {Nucleic Acids Research},
	author = {Popitsch, Niko and von Haeseler, Arndt},
	month = jan,
	year = {2013},
	pages = {e27},
}

@article{campagne_compression_2013,
	title = {Compression of {Structured} {High}-{Throughput} {Sequencing} {Data}},
	volume = {8},
	issn = {1932-6203},
	url = {https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0079871},
	doi = {10.1371/journal.pone.0079871},
	abstract = {Large biological datasets are being produced at a rapid pace and create substantial storage challenges, particularly in the domain of high-throughput sequencing (HTS). Most approaches currently used to store HTS data are either unable to quickly adapt to the requirements of new sequencing or analysis methods (because they do not support schema evolution), or fail to provide state of the art compression of the datasets. We have devised new approaches to store HTS data that support seamless data schema evolution and compress datasets substantially better than existing approaches. Building on these new approaches, we discuss and demonstrate how a multi-tier data organization can dramatically reduce the storage, computational and network burden of collecting, analyzing, and archiving large sequencing datasets. For instance, we show that spliced RNA-Seq alignments can be stored in less than 4\% the size of a BAM file with perfect data fidelity. Compared to the previous compression state of the art, these methods reduce dataset size more than 40\% when storing exome, gene expression or DNA methylation datasets. The approaches have been integrated in a comprehensive suite of software tools (http://goby.campagnelab.org) that support common analyses for a range of high-throughput sequencing assays.},
	language = {en},
	number = {11},
	urldate = {2024-05-19},
	journal = {PLOS ONE},
	author = {Campagne, Fabien and Dorff, Kevin C. and Chambwe, Nyasha and Robinson, James T. and Mesirov, Jill P.},
	month = nov,
	year = {2013},
	note = {Publisher: Public Library of Science},
	keywords = {Arithmetic, Compression, Computer software, Data compression, Data management, Genomics, Multiple alignment calculation, Sequence alignment},
	pages = {e79871},
}

@article{hosseini_survey_2016,
	title = {A {Survey} on {Data} {Compression} {Methods} for {Biological} {Sequences}},
	volume = {7},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	issn = {2078-2489},
	url = {https://www.mdpi.com/2078-2489/7/4/56},
	doi = {10.3390/info7040056},
	abstract = {The ever increasing growth of the production of high-throughput sequencing data poses a serious challenge to the storage, processing and transmission of these data. As frequently stated, it is a data deluge. Compression is essential to address this challenge—it reduces storage space and processing costs, along with speeding up data transmission. In this paper, we provide a comprehensive survey of existing compression approaches, that are specialized for biological data, including protein and DNA sequences. Also, we devote an important part of the paper to the approaches proposed for the compression of different file formats, such as FASTA, as well as FASTQ and SAM/BAM, which contain quality scores and metadata, in addition to the biological sequences. Then, we present a comparison of the performance of several methods, in terms of compression ratio, memory usage and compression/decompression time. Finally, we present some suggestions for future research on biological data compression.},
	language = {en},
	number = {4},
	urldate = {2024-05-19},
	journal = {Information},
	author = {Hosseini, Morteza and Pratas, Diogo and Pinho, Armando J.},
	month = dec,
	year = {2016},
	note = {Number: 4
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {BAM, DNA sequence, FASTA, FASTQ, Multi-FASTA, SAM, protein sequence, reference-based compression, reference-free compression},
	pages = {56},
}

@misc{banerjee_abridge_2022,
	title = {{ABRIDGE}: {An} ultra-compression software for {SAM} alignment files},
	copyright = {© 2022, Posted by Cold Spring Harbor Laboratory. This pre-print is available under a Creative Commons License (Attribution-NoDerivs 4.0 International), CC BY-ND 4.0, as described at http://creativecommons.org/licenses/by-nd/4.0/},
	shorttitle = {{ABRIDGE}},
	url = {https://www.biorxiv.org/content/10.1101/2022.01.04.474935v1},
	doi = {10.1101/2022.01.04.474935},
	abstract = {Advancement in technology has enabled sequencing machines to produce vast amounts of genetic data, causing an increase in storage demands. Most genomic software utilizes read alignments for several purposes including transcriptome assembly and gene count estimation. Herein we present, ABRIDGE, a state-of-the-art compressor for SAM alignment files offering users both lossless and lossy compression options. This reference-based file compressor achieves the best compression ratio among all compression software ensuring lower space demand and faster file transmission. Central to the software is a novel algorithm that retains non-redundant information. This new approach has allowed ABRIDGE to achieve a compression 16\% higher than the second-best compressor for RNA-Seq reads and over 35\% for DNA-Seq reads. ABRIDGE also offers users the option to randomly access location without having to decompress the entire file. ABRIDGE is distributed under MIT license and can be obtained from GitHub (https://github.com/sagnikbanerjee15/Abridge) and docker hub. We anticipate that the user community will adopt ABRIDGE within their existing pipeline encouraging further research in this domain.},
	language = {en},
	urldate = {2024-05-19},
	publisher = {bioRxiv},
	author = {Banerjee, Sagnik and Andorf, Carson},
	month = jan,
	year = {2022},
	note = {Pages: 2022.01.04.474935
Section: New Results},
}

@book{alexandrescu_d_2010,
	title = {The {D} {Programming} {Language}},
	isbn = {978-0-13-265440-1},
	abstract = {D is a programming language built to help programmers address the challenges of modern software development. It does so by fostering modules interconnected through precise interfaces, a federation of tightly integrated programming paradigms, language-enforced thread isolation, modular type safety, an efficient memory model, and more.   The D Programming Language is an authoritative and comprehensive introduction to D. Reflecting the author’s signature style, the writing is casual and conversational, but never at the expense of focus and pre¿cision. It covers all aspects of the language (such as expressions, statements, types, functions, contracts, and modules), but it is much more than an enumeration of features.   Inside the book you will find  In-depth explanations, with idiomatic examples, for all language features How feature groups support major programming paradigms Rationale and best-use advice for each major feature Discussion of cross-cutting issues, such as error handling, contract programming, and concurrency Tables, figures, and “cheat sheets” that serve as a handy quick reference for day-to-day problem solving with D  Written for the working programmer, The D Programming Language not only introduces the D language—it presents a compendium of good practices and idioms to help both your coding with D and your coding in general.},
	language = {en},
	publisher = {Addison-Wesley Professional},
	author = {Alexandrescu, Andrei},
	month = jun,
	year = {2010},
	note = {Google-Books-ID: bn7GNq6fiIUC},
	keywords = {Computers / Languages / C, Computers / Languages / General},
}

@misc{noauthor_novosort_nodate,
	title = {{NovoSort} {\textbar} {Novocraft}},
	url = {https://www.novocraft.com/products/novosort/},
	language = {en-US},
	urldate = {2024-05-19},
}

@article{the_bioconda_team_bioconda_2018,
	title = {Bioconda: sustainable and comprehensive software distribution for the life sciences},
	volume = {15},
	issn = {1548-7091, 1548-7105},
	shorttitle = {Bioconda},
	url = {https://www.nature.com/articles/s41592-018-0046-7},
	doi = {10.1038/s41592-018-0046-7},
	language = {en},
	number = {7},
	urldate = {2024-05-19},
	journal = {Nature Methods},
	author = {{The Bioconda Team} and Grüning, Björn and Dale, Ryan and Sjödin, Andreas and Chapman, Brad A. and Rowe, Jillian and Tomkins-Tinch, Christopher H. and Valieris, Renan and Köster, Johannes},
	month = jul,
	year = {2018},
	pages = {475--476},
}

@article{the_1000_genomes_project_consortium_1000_2012,
	title = {The 1000 {Genomes} {Project}: data management and community access},
	volume = {9},
	copyright = {https://creativecommons.org/licenses/by-nc-sa/3.0/},
	issn = {1548-7091, 1548-7105},
	shorttitle = {The 1000 {Genomes} {Project}},
	url = {https://www.nature.com/articles/nmeth.1974},
	doi = {10.1038/nmeth.1974},
	language = {en},
	number = {5},
	urldate = {2024-05-17},
	journal = {Nature Methods},
	author = {{The 1000 Genomes Project Consortium} and Clarke, Laura and Zheng-Bradley, Xiangqun and Smith, Richard and Kulesha, Eugene and Xiao, Chunlin and Toneva, Iliana and Vaughan, Brendan and Preuss, Don and Leinonen, Rasko and Shumway, Martin and Sherry, Stephen and Flicek, Paul},
	month = may,
	year = {2012},
	pages = {459--462},
}

@article{tarasov_sambamba_2015,
	title = {Sambamba: fast processing of {NGS} alignment formats},
	volume = {31},
	copyright = {http://creativecommons.org/licenses/by/4.0/},
	issn = {1367-4811, 1367-4803},
	shorttitle = {Sambamba},
	url = {https://academic.oup.com/bioinformatics/article/31/12/2032/214758},
	doi = {10.1093/bioinformatics/btv098},
	abstract = {Abstract
            Summary: Sambamba is a high-performance robust tool and library for working with SAM, BAM and CRAM sequence alignment files; the most common file formats for aligned next generation sequencing data. Sambamba is a faster alternative to samtools that exploits multi-core processing and dramatically reduces processing time. Sambamba is being adopted at sequencing centers, not only because of its speed, but also because of additional functionality, including coverage analysis and powerful filtering capability.
            Availability and implementation: Sambamba is free and open source software, available under a GPLv2 license. Sambamba can be downloaded and installed from http://www.open-bio.org/wiki/Sambamba.
            Sambamba v0.5.0 was released with doi:10.5281/zenodo.13200.
            Contact: j.c.p.prins@umcutrecht.nl},
	language = {en},
	number = {12},
	urldate = {2024-05-06},
	journal = {Bioinformatics},
	author = {Tarasov, Artem and Vilella, Albert J. and Cuppen, Edwin and Nijman, Isaac J. and Prins, Pjotr},
	month = jun,
	year = {2015},
	keywords = {related},
	pages = {2032--2034},
}

@article{liu_sequence_2023,
	title = {Sequence {Alignment}/{Map} format: a comprehensive review of approaches and applications},
	volume = {24},
	issn = {1477-4054},
	shorttitle = {Sequence {Alignment}/{Map} format},
	url = {https://doi.org/10.1093/bib/bbad320},
	doi = {10.1093/bib/bbad320},
	abstract = {The Sequence Alignment/Map (SAM) format file is the text file used to record alignment information. Alignment is the core of sequencing analysis, and downstream tasks accept mapping results for further processing. Given the rapid development of the sequencing industry today, a comprehensive understanding of the SAM format and related tools is necessary to meet the challenges of data processing and analysis. This paper is devoted to retrieving knowledge in the broad field of SAM. First, the format of SAM is introduced to understand the overall process of the sequencing analysis. Then, existing work is systematically classified in accordance with generation, compression and application, and the involved SAM tools are specifically mined. Lastly, a summary and some thoughts on future directions are provided.},
	number = {5},
	urldate = {2024-05-17},
	journal = {Briefings in Bioinformatics},
	author = {Liu, Yuansheng and Shen, Xiangzhen and Gong, Yongshun and Liu, Yiping and Song, Bosheng and Zeng, Xiangxiang},
	month = sep,
	year = {2023},
	keywords = {intro},
	pages = {bbad320},
}

@misc{noauthor_fix_nodate,
	title = {Fix {Performance} {Bottlenecks} with {Intel}® {VTune}™ {Profiler}},
	url = {https://www.intel.com/content/www/us/en/developer/tools/oneapi/vtune-profiler.html},
	abstract = {Use advanced sampling and profiling methods to quickly analyze code, isolate issues, and deliver performance insight on modern CPUs, GPUs, and FPGAs.},
	language = {en},
	urldate = {2024-05-13},
	journal = {Intel},
}

@misc{noauthor_linuxfspipec_nodate,
	title = {linux/fs/pipe.c at master · torvalds/linux},
	url = {https://github.com/torvalds/linux/blob/master/fs/pipe.c},
	abstract = {Linux kernel source tree. Contribute to torvalds/linux development by creating an account on GitHub.},
	language = {en},
	urldate = {2024-05-06},
	journal = {GitHub},
}

@misc{tarreau_wtarreaulibslz_2024,
	title = {wtarreau/libslz},
	url = {https://github.com/wtarreau/libslz},
	abstract = {Stateless, zlib-compatible, and very fast compression library -- http://libslz.org},
	urldate = {2024-05-03},
	author = {Tarreau, Willy},
	month = may,
	year = {2024},
	note = {original-date: 2020-02-16T17:36:32Z},
}

@misc{noauthor_stateless_nodate,
	title = {Stateless {ZIP} library (libslz)},
	url = {http://www.libslz.org/},
	urldate = {2024-05-03},
}

@misc{noauthor_richgel999miniz_nodate,
	title = {richgel999/miniz: miniz: {Single} {C} source file zlib-replacement library, originally from code.google.com/p/miniz},
	url = {https://github.com/richgel999/miniz/tree/master},
	urldate = {2024-05-03},
}

@misc{noauthor_intelisa-l_2024,
	title = {intel/isa-l},
	url = {https://github.com/intel/isa-l},
	abstract = {Intelligent Storage Acceleration Library},
	urldate = {2024-05-03},
	publisher = {Intel Corporation},
	month = apr,
	year = {2024},
	note = {original-date: 2016-01-25T23:10:55Z},
}

@inproceedings{tucker_isa-l_2017,
	address = {Snowbird, UT, USA},
	title = {{ISA}-{L} {Igzip}: {Improvements} to a {Fast} {Deflate}},
	isbn = {978-1-5090-6721-3},
	shorttitle = {{ISA}-{L} {Igzip}},
	url = {http://ieeexplore.ieee.org/document/7923748/},
	doi = {10.1109/DCC.2017.88},
	urldate = {2024-05-03},
	booktitle = {2017 {Data} {Compression} {Conference} ({DCC})},
	publisher = {IEEE},
	author = {Tucker, Gregory and Oursler, Roy and Stern, Johnathan},
	month = apr,
	year = {2017},
	pages = {465--465},
}

@misc{noauthor_googlezopfli_2024,
	title = {google/zopfli},
	copyright = {Apache-2.0},
	url = {https://github.com/google/zopfli},
	abstract = {Zopfli Compression Algorithm is a compression library programmed in C to perform very good, but slow, deflate or zlib compression.},
	urldate = {2024-05-03},
	publisher = {Google},
	month = may,
	year = {2024},
	note = {original-date: 2015-03-09T10:32:36Z},
}

@misc{noauthor_cloudflarezlib_2024,
	title = {cloudflare/zlib},
	url = {https://github.com/cloudflare/zlib},
	abstract = {Cloudflare fork of zlib with massive performance improvements},
	urldate = {2024-05-03},
	publisher = {Cloudflare},
	month = may,
	year = {2024},
	note = {original-date: 2014-03-05T22:14:29Z},
}

@misc{noauthor_intelzlib_2024,
	title = {intel/zlib},
	url = {https://github.com/intel/zlib},
	urldate = {2024-05-03},
	publisher = {Intel Corporation},
	month = mar,
	year = {2024},
	note = {original-date: 2013-12-13T19:36:32Z},
}

@misc{noauthor_zlib-ngzlib-ng_2024,
	title = {zlib-ng/zlib-ng},
	copyright = {Zlib},
	url = {https://github.com/zlib-ng/zlib-ng},
	abstract = {zlib replacement with optimizations for "next generation" systems.},
	urldate = {2024-05-03},
	publisher = {zlib-ng},
	month = may,
	year = {2024},
	note = {original-date: 2014-10-13T15:47:27Z},
	keywords = {c, compression, deflate, inflate, library, optimized, zlib, zlib-license, zlib-ng, zlib-replacement},
}

@misc{noauthor_intelisa-l_nodate,
	title = {intel/isa-l: {Intelligent} {Storage} {Acceleration} {Library}},
	url = {https://github.com/intel/isa-l/tree/master},
	urldate = {2024-05-03},
}

@article{yamada_7bgzf_2020,
	title = {7bgzf: {Replacing} samtools bgzip deflation for archiving and real-time compression},
	volume = {85},
	issn = {1476-9271},
	shorttitle = {7bgzf},
	url = {https://www.sciencedirect.com/science/article/pii/S1476927119311375},
	doi = {10.1016/j.compbiolchem.2020.107207},
	abstract = {Background
Genomic sequence data are not only massive but also increasing rapidly every day; therefore, it is essential to compress such data for sharing. Though there are some specific compressors, they lack interoperability. In this study, a SAMtools bgzip variant named 7bgzf has been developed, incorporating several compression and deflation algorithms other than the widely used zlib algorithm. An extensive benchmarking study has been carried out with available data compression software.
Results
On both x64 and ARM machines, igzip performed very rapidly. For high compression, using libdeflate on the x64 platform achieved high compression with tolerable speed loss.
Conclusions
Based on appropriate algorithm selection, the proposed compression method performed better than the original bgzip method while maintaining interoperability with existing software. Therefore, this software is useful for both distribution of genomic sequence archives and real-time compression in mobile computing.},
	urldate = {2024-05-03},
	journal = {Computational Biology and Chemistry},
	author = {Yamada, Taiju},
	month = apr,
	year = {2020},
	keywords = {Deflation, Next generation sequencer, Samtools},
	pages = {107207},
}

@misc{noauthor_zlib-ngzlib-ng_2024-1,
	title = {zlib-ng/zlib-ng},
	copyright = {Zlib},
	url = {https://github.com/zlib-ng/zlib-ng},
	abstract = {zlib replacement with optimizations for "next generation" systems.},
	urldate = {2024-05-02},
	publisher = {zlib-ng},
	month = may,
	year = {2024},
	note = {original-date: 2014-10-13T15:47:27Z},
	keywords = {c, compression, deflate, inflate, library, optimized, zlib, zlib-license, zlib-ng, zlib-replacement},
}

@article{myers_intercepting_nodate,
	title = {Intercepting {Arbitrary} {Functions} on {Windows}, {UNIX}, and {Macintosh} {OS} {X} {Platforms}},
	abstract = {It is often desirable to modify the behavior of existing code bases by wrapping or replacing functions. When editing the source code of those functions is a viable option, this can be a straight-forward process. When the source of the functions cannot be edited (e.g., if the functions are provided by the system C library), then alternative techniques are required. Here, we present such techniques for UNIX, Windows, and Macintosh OS X platforms. We have used these techniques to update bioinformatics applications to call the application program interface (API) provided by the Berkeley Open Infrastructure for Network Computing (BOINC), a distributed computing toolkit.},
	language = {en},
	author = {Myers, Daniel S and Bazinet, Adam L},
}

@article{myers_intercepting_nodate-1,
	title = {Intercepting {Arbitrary} {Functions} on {Windows}, {UNIX}, and {Macintosh} {OS} {X} {Platforms}},
	abstract = {It is often desirable to modify the behavior of existing code bases by wrapping or replacing functions. When editing the source code of those functions is a viable option, this can be a straight-forward process. When the source of the functions cannot be edited (e.g., if the functions are provided by the system C library), then alternative techniques are required. Here, we present such techniques for UNIX, Windows, and Macintosh OS X platforms. We have used these techniques to update bioinformatics applications to call the application program interface (API) provided by the Berkeley Open Infrastructure for Network Computing (BOINC), a distributed computing toolkit.},
	language = {en},
	author = {Myers, Daniel S and Bazinet, Adam L},
}

@misc{noauthor_getrlimit2_nodate,
	title = {getrlimit(2) - {Linux} manual page},
	url = {https://man7.org/linux/man-pages/man2/getrlimit.2.html},
	urldate = {2024-04-26},
}

@misc{biggers_ebiggerslibdeflate_2024,
	title = {ebiggers/libdeflate},
	copyright = {MIT},
	url = {https://github.com/ebiggers/libdeflate},
	abstract = {Heavily optimized library for DEFLATE/zlib/gzip compression and decompression},
	urldate = {2024-04-22},
	author = {Biggers, Eric},
	month = apr,
	year = {2024},
	note = {original-date: 2014-12-28T05:10:42Z},
}

@article{danecek_twelve_2021,
	title = {Twelve years of {SAMtools} and {BCFtools}},
	volume = {10},
	issn = {2047-217X},
	url = {https://doi.org/10.1093/gigascience/giab008},
	doi = {10.1093/gigascience/giab008},
	abstract = {SAMtools and BCFtools are widely used programs for processing and analysing high-throughput sequencing data. They include tools for file format conversion and manipulation, sorting, querying, statistics, variant calling, and effect analysis amongst other methods.The first version appeared online 12 years ago and has been maintained and further developed ever since, with many new features and improvements added over the years. The SAMtools and BCFtools packages represent a unique collection of tools that have been used in numerous other software projects and countless genomic pipelines.Both SAMtools and BCFtools are freely available on GitHub under the permissive MIT licence, free for both non-commercial and commercial use. Both packages have been installed \&gt;1 million times via Bioconda. The source code and documentation are available from https://www.htslib.org.},
	number = {2},
	urldate = {2024-04-17},
	journal = {GigaScience},
	author = {Danecek, Petr and Bonfield, James K and Liddle, Jennifer and Marshall, John and Ohan, Valeriu and Pollard, Martin O and Whitwham, Andrew and Keane, Thomas and McCarthy, Shane A and Davies, Robert M and Li, Heng},
	month = feb,
	year = {2021},
	pages = {giab008},
}

@article{bonfield_htslib_2021,
	title = {{HTSlib}: {C} library for reading/writing high-throughput sequencing data},
	volume = {10},
	issn = {2047-217X},
	shorttitle = {{HTSlib}},
	url = {https://doi.org/10.1093/gigascience/giab007},
	doi = {10.1093/gigascience/giab007},
	abstract = {Since the original publication of the VCF and SAM formats, an explosion of software tools have been created to process these data files. To facilitate this a library was produced out of the original SAMtools implementation, with a focus on performance and robustness. The file formats themselves have become international standards under the jurisdiction of the Global Alliance for Genomics and Health.We present a software library for providing programmatic access to sequencing alignment and variant formats. It was born out of the widely used SAMtools and BCFtools applications. Considerable improvements have been made to the original code plus many new features including newer access protocols, the addition of the CRAM file format, better indexing and iterators, and better use of threading.Since the original Samtools release, performance has been considerably improved, with a BAM read-write loop running 5 times faster and BAM to SAM conversion 13 times faster (both using 16 threads, compared to Samtools 0.1.19). Widespread adoption has seen HTSlib downloaded \&gt;1 million times from GitHub and conda. The C library has been used directly by an estimated 900 GitHub projects and has been incorporated into Perl, Python, Rust, and R, significantly expanding the number of uses via other languages. HTSlib is open source and is freely available from htslib.org under MIT/BSD license.},
	number = {2},
	urldate = {2024-04-10},
	journal = {GigaScience},
	author = {Bonfield, James K and Marshall, John and Danecek, Petr and Li, Heng and Ohan, Valeriu and Whitwham, Andrew and Keane, Thomas and Davies, Robert M},
	month = feb,
	year = {2021},
	pages = {giab007},
}
