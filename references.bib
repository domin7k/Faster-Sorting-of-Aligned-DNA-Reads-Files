
@article{the_1000_genomes_project_consortium_1000_2012,
	title = {The 1000 {Genomes} {Project}: data management and community access},
	volume = {9},
	copyright = {https://creativecommons.org/licenses/by-nc-sa/3.0/},
	issn = {1548-7091, 1548-7105},
	shorttitle = {The 1000 {Genomes} {Project}},
	url = {https://www.nature.com/articles/nmeth.1974},
	doi = {10.1038/nmeth.1974},
	language = {en},
	number = {5},
	urldate = {2024-05-17},
	journal = {Nature Methods},
	author = {{The 1000 Genomes Project Consortium} and Clarke, Laura and Zheng-Bradley, Xiangqun and Smith, Richard and Kulesha, Eugene and Xiao, Chunlin and Toneva, Iliana and Vaughan, Brendan and Preuss, Don and Leinonen, Rasko and Shumway, Martin and Sherry, Stephen and Flicek, Paul},
	month = may,
	year = {2012},
	pages = {459--462},
}

@article{tarasov_sambamba_2015,
	title = {Sambamba: fast processing of {NGS} alignment formats},
	volume = {31},
	copyright = {http://creativecommons.org/licenses/by/4.0/},
	issn = {1367-4811, 1367-4803},
	shorttitle = {Sambamba},
	url = {https://academic.oup.com/bioinformatics/article/31/12/2032/214758},
	doi = {10.1093/bioinformatics/btv098},
	abstract = {Abstract
            Summary: Sambamba is a high-performance robust tool and library for working with SAM, BAM and CRAM sequence alignment files; the most common file formats for aligned next generation sequencing data. Sambamba is a faster alternative to samtools that exploits multi-core processing and dramatically reduces processing time. Sambamba is being adopted at sequencing centers, not only because of its speed, but also because of additional functionality, including coverage analysis and powerful filtering capability.
            Availability and implementation: Sambamba is free and open source software, available under a GPLv2 license. Sambamba can be downloaded and installed from http://www.open-bio.org/wiki/Sambamba.
            Sambamba v0.5.0 was released with doi:10.5281/zenodo.13200.
            Contact: j.c.p.prins@umcutrecht.nl},
	language = {en},
	number = {12},
	urldate = {2024-05-06},
	journal = {Bioinformatics},
	author = {Tarasov, Artem and Vilella, Albert J. and Cuppen, Edwin and Nijman, Isaac J. and Prins, Pjotr},
	month = jun,
	year = {2015},
	keywords = {related},
	pages = {2032--2034},
}

@article{liu_sequence_2023,
	title = {Sequence {Alignment}/{Map} format: a comprehensive review of approaches and applications},
	volume = {24},
	issn = {1477-4054},
	shorttitle = {Sequence {Alignment}/{Map} format},
	url = {https://doi.org/10.1093/bib/bbad320},
	doi = {10.1093/bib/bbad320},
	abstract = {The Sequence Alignment/Map (SAM) format file is the text file used to record alignment information. Alignment is the core of sequencing analysis, and downstream tasks accept mapping results for further processing. Given the rapid development of the sequencing industry today, a comprehensive understanding of the SAM format and related tools is necessary to meet the challenges of data processing and analysis. This paper is devoted to retrieving knowledge in the broad field of SAM. First, the format of SAM is introduced to understand the overall process of the sequencing analysis. Then, existing work is systematically classified in accordance with generation, compression and application, and the involved SAM tools are specifically mined. Lastly, a summary and some thoughts on future directions are provided.},
	number = {5},
	urldate = {2024-05-17},
	journal = {Briefings in Bioinformatics},
	author = {Liu, Yuansheng and Shen, Xiangzhen and Gong, Yongshun and Liu, Yiping and Song, Bosheng and Zeng, Xiangxiang},
	month = sep,
	year = {2023},
	keywords = {intro},
	pages = {bbad320},
}

@misc{noauthor_fix_nodate,
	title = {Fix {Performance} {Bottlenecks} with {Intel}® {VTune}™ {Profiler}},
	url = {https://www.intel.com/content/www/us/en/developer/tools/oneapi/vtune-profiler.html},
	abstract = {Use advanced sampling and profiling methods to quickly analyze code, isolate issues, and deliver performance insight on modern CPUs, GPUs, and FPGAs.},
	language = {en},
	urldate = {2024-05-13},
	journal = {Intel},
}

@misc{noauthor_linuxfspipec_nodate,
	title = {linux/fs/pipe.c at master · torvalds/linux},
	url = {https://github.com/torvalds/linux/blob/master/fs/pipe.c},
	abstract = {Linux kernel source tree. Contribute to torvalds/linux development by creating an account on GitHub.},
	language = {en},
	urldate = {2024-05-06},
	journal = {GitHub},
}

@misc{tarreau_wtarreaulibslz_2024,
	title = {wtarreau/libslz},
	url = {https://github.com/wtarreau/libslz},
	abstract = {Stateless, zlib-compatible, and very fast compression library -- http://libslz.org},
	urldate = {2024-05-03},
	author = {Tarreau, Willy},
	month = may,
	year = {2024},
	note = {original-date: 2020-02-16T17:36:32Z},
}

@misc{noauthor_stateless_nodate,
	title = {Stateless {ZIP} library (libslz)},
	url = {http://www.libslz.org/},
	urldate = {2024-05-03},
}

@misc{noauthor_richgel999miniz_nodate,
	title = {richgel999/miniz: miniz: {Single} {C} source file zlib-replacement library, originally from code.google.com/p/miniz},
	url = {https://github.com/richgel999/miniz/tree/master},
	urldate = {2024-05-03},
}

@misc{noauthor_intelisa-l_2024,
	title = {intel/isa-l},
	url = {https://github.com/intel/isa-l},
	abstract = {Intelligent Storage Acceleration Library},
	urldate = {2024-05-03},
	publisher = {Intel Corporation},
	month = apr,
	year = {2024},
	note = {original-date: 2016-01-25T23:10:55Z},
}

@inproceedings{tucker_isa-l_2017,
	address = {Snowbird, UT, USA},
	title = {{ISA}-{L} {Igzip}: {Improvements} to a {Fast} {Deflate}},
	isbn = {978-1-5090-6721-3},
	shorttitle = {{ISA}-{L} {Igzip}},
	url = {http://ieeexplore.ieee.org/document/7923748/},
	doi = {10.1109/DCC.2017.88},
	urldate = {2024-05-03},
	booktitle = {2017 {Data} {Compression} {Conference} ({DCC})},
	publisher = {IEEE},
	author = {Tucker, Gregory and Oursler, Roy and Stern, Johnathan},
	month = apr,
	year = {2017},
	pages = {465--465},
}

@misc{noauthor_googlezopfli_2024,
	title = {google/zopfli},
	copyright = {Apache-2.0},
	url = {https://github.com/google/zopfli},
	abstract = {Zopfli Compression Algorithm is a compression library programmed in C to perform very good, but slow, deflate or zlib compression.},
	urldate = {2024-05-03},
	publisher = {Google},
	month = may,
	year = {2024},
	note = {original-date: 2015-03-09T10:32:36Z},
}

@misc{noauthor_cloudflarezlib_2024,
	title = {cloudflare/zlib},
	url = {https://github.com/cloudflare/zlib},
	abstract = {Cloudflare fork of zlib with massive performance improvements},
	urldate = {2024-05-03},
	publisher = {Cloudflare},
	month = may,
	year = {2024},
	note = {original-date: 2014-03-05T22:14:29Z},
}

@misc{noauthor_intelzlib_2024,
	title = {intel/zlib},
	url = {https://github.com/intel/zlib},
	urldate = {2024-05-03},
	publisher = {Intel Corporation},
	month = mar,
	year = {2024},
	note = {original-date: 2013-12-13T19:36:32Z},
}

@misc{noauthor_zlib-ngzlib-ng_2024,
	title = {zlib-ng/zlib-ng},
	copyright = {Zlib},
	url = {https://github.com/zlib-ng/zlib-ng},
	abstract = {zlib replacement with optimizations for "next generation" systems.},
	urldate = {2024-05-03},
	publisher = {zlib-ng},
	month = may,
	year = {2024},
	note = {original-date: 2014-10-13T15:47:27Z},
	keywords = {c, compression, deflate, inflate, library, optimized, zlib, zlib-license, zlib-ng, zlib-replacement},
}

@misc{noauthor_intelisa-l_nodate,
	title = {intel/isa-l: {Intelligent} {Storage} {Acceleration} {Library}},
	url = {https://github.com/intel/isa-l/tree/master},
	urldate = {2024-05-03},
}

@article{yamada_7bgzf_2020,
	title = {7bgzf: {Replacing} samtools bgzip deflation for archiving and real-time compression},
	volume = {85},
	issn = {1476-9271},
	shorttitle = {7bgzf},
	url = {https://www.sciencedirect.com/science/article/pii/S1476927119311375},
	doi = {10.1016/j.compbiolchem.2020.107207},
	abstract = {Background
Genomic sequence data are not only massive but also increasing rapidly every day; therefore, it is essential to compress such data for sharing. Though there are some specific compressors, they lack interoperability. In this study, a SAMtools bgzip variant named 7bgzf has been developed, incorporating several compression and deflation algorithms other than the widely used zlib algorithm. An extensive benchmarking study has been carried out with available data compression software.
Results
On both x64 and ARM machines, igzip performed very rapidly. For high compression, using libdeflate on the x64 platform achieved high compression with tolerable speed loss.
Conclusions
Based on appropriate algorithm selection, the proposed compression method performed better than the original bgzip method while maintaining interoperability with existing software. Therefore, this software is useful for both distribution of genomic sequence archives and real-time compression in mobile computing.},
	urldate = {2024-05-03},
	journal = {Computational Biology and Chemistry},
	author = {Yamada, Taiju},
	month = apr,
	year = {2020},
	keywords = {Deflation, Next generation sequencer, Samtools},
	pages = {107207},
}

@misc{noauthor_zlib-ngzlib-ng_2024-1,
	title = {zlib-ng/zlib-ng},
	copyright = {Zlib},
	url = {https://github.com/zlib-ng/zlib-ng},
	abstract = {zlib replacement with optimizations for "next generation" systems.},
	urldate = {2024-05-02},
	publisher = {zlib-ng},
	month = may,
	year = {2024},
	note = {original-date: 2014-10-13T15:47:27Z},
	keywords = {c, compression, deflate, inflate, library, optimized, zlib, zlib-license, zlib-ng, zlib-replacement},
}

@article{myers_intercepting_nodate,
	title = {Intercepting {Arbitrary} {Functions} on {Windows}, {UNIX}, and {Macintosh} {OS} {X} {Platforms}},
	abstract = {It is often desirable to modify the behavior of existing code bases by wrapping or replacing functions. When editing the source code of those functions is a viable option, this can be a straight-forward process. When the source of the functions cannot be edited (e.g., if the functions are provided by the system C library), then alternative techniques are required. Here, we present such techniques for UNIX, Windows, and Macintosh OS X platforms. We have used these techniques to update bioinformatics applications to call the application program interface (API) provided by the Berkeley Open Infrastructure for Network Computing (BOINC), a distributed computing toolkit.},
	language = {en},
	author = {Myers, Daniel S and Bazinet, Adam L},
}

@article{myers_intercepting_nodate-1,
	title = {Intercepting {Arbitrary} {Functions} on {Windows}, {UNIX}, and {Macintosh} {OS} {X} {Platforms}},
	abstract = {It is often desirable to modify the behavior of existing code bases by wrapping or replacing functions. When editing the source code of those functions is a viable option, this can be a straight-forward process. When the source of the functions cannot be edited (e.g., if the functions are provided by the system C library), then alternative techniques are required. Here, we present such techniques for UNIX, Windows, and Macintosh OS X platforms. We have used these techniques to update bioinformatics applications to call the application program interface (API) provided by the Berkeley Open Infrastructure for Network Computing (BOINC), a distributed computing toolkit.},
	language = {en},
	author = {Myers, Daniel S and Bazinet, Adam L},
}

@misc{noauthor_getrlimit2_nodate,
	title = {getrlimit(2) - {Linux} manual page},
	url = {https://man7.org/linux/man-pages/man2/getrlimit.2.html},
	urldate = {2024-04-26},
}

@misc{biggers_ebiggerslibdeflate_2024,
	title = {ebiggers/libdeflate},
	copyright = {MIT},
	url = {https://github.com/ebiggers/libdeflate},
	abstract = {Heavily optimized library for DEFLATE/zlib/gzip compression and decompression},
	urldate = {2024-04-22},
	author = {Biggers, Eric},
	month = apr,
	year = {2024},
	note = {original-date: 2014-12-28T05:10:42Z},
}

@article{danecek_twelve_2021,
	title = {Twelve years of {SAMtools} and {BCFtools}},
	volume = {10},
	issn = {2047-217X},
	url = {https://doi.org/10.1093/gigascience/giab008},
	doi = {10.1093/gigascience/giab008},
	abstract = {SAMtools and BCFtools are widely used programs for processing and analysing high-throughput sequencing data. They include tools for file format conversion and manipulation, sorting, querying, statistics, variant calling, and effect analysis amongst other methods.The first version appeared online 12 years ago and has been maintained and further developed ever since, with many new features and improvements added over the years. The SAMtools and BCFtools packages represent a unique collection of tools that have been used in numerous other software projects and countless genomic pipelines.Both SAMtools and BCFtools are freely available on GitHub under the permissive MIT licence, free for both non-commercial and commercial use. Both packages have been installed \&gt;1 million times via Bioconda. The source code and documentation are available from https://www.htslib.org.},
	number = {2},
	urldate = {2024-04-17},
	journal = {GigaScience},
	author = {Danecek, Petr and Bonfield, James K and Liddle, Jennifer and Marshall, John and Ohan, Valeriu and Pollard, Martin O and Whitwham, Andrew and Keane, Thomas and McCarthy, Shane A and Davies, Robert M and Li, Heng},
	month = feb,
	year = {2021},
	pages = {giab008},
}

@article{bonfield_htslib_2021,
	title = {{HTSlib}: {C} library for reading/writing high-throughput sequencing data},
	volume = {10},
	issn = {2047-217X},
	shorttitle = {{HTSlib}},
	url = {https://doi.org/10.1093/gigascience/giab007},
	doi = {10.1093/gigascience/giab007},
	abstract = {Since the original publication of the VCF and SAM formats, an explosion of software tools have been created to process these data files. To facilitate this a library was produced out of the original SAMtools implementation, with a focus on performance and robustness. The file formats themselves have become international standards under the jurisdiction of the Global Alliance for Genomics and Health.We present a software library for providing programmatic access to sequencing alignment and variant formats. It was born out of the widely used SAMtools and BCFtools applications. Considerable improvements have been made to the original code plus many new features including newer access protocols, the addition of the CRAM file format, better indexing and iterators, and better use of threading.Since the original Samtools release, performance has been considerably improved, with a BAM read-write loop running 5 times faster and BAM to SAM conversion 13 times faster (both using 16 threads, compared to Samtools 0.1.19). Widespread adoption has seen HTSlib downloaded \&gt;1 million times from GitHub and conda. The C library has been used directly by an estimated 900 GitHub projects and has been incorporated into Perl, Python, Rust, and R, significantly expanding the number of uses via other languages. HTSlib is open source and is freely available from htslib.org under MIT/BSD license.},
	number = {2},
	urldate = {2024-04-10},
	journal = {GigaScience},
	author = {Bonfield, James K and Marshall, John and Danecek, Petr and Li, Heng and Ohan, Valeriu and Whitwham, Andrew and Keane, Thomas and Davies, Robert M},
	month = feb,
	year = {2021},
	pages = {giab007},
}
